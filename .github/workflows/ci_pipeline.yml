name: Docker Image CI

on:
  workflow_dispatch:
    inputs:
      image_version:
        description: 'Enter new image version (default: latest)'
        required: true
        default: 'latest'
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    permissions: # <--- Add this block here
      contents: write # <--- This grants write access to repository content
    steps:

    - name: Pull images
      run: |
        docker pull cuongopswat/go-coffeeshop-web
        # docker pull cuongopswat/go-coffeeshop-barista
        # docker pull cuongopswat/go-coffeeshop-counter
        # docker pull cuongopswat/go-coffeeshop-product
        # docker pull cuongopswat/go-coffeeshop-proxy
        # docker pull cuongopswat/go-coffeeshop-kitchen
        
        
    
    - name: Cache Trivy DB
      uses: actions/cache@v3
      with:
        path: ~/.cache/trivy  # Cache path for Trivy DB
        key: ${{ runner.os }}-trivy-db
        restore-keys: |
          ${{ runner.os }}-trivy-db
    - name: Install Trivy
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
    - name: Scan image by Trivy
      run: |
        # # trivy image cuongopswat/go-coffeeshop-web --severity CRITICAL  #--exit-code 1
        # trivy image cuongopswat/go-coffeeshop-barista --severity CRITICAL #--exit-code 1
        # trivy image cuongopswat/go-coffeeshop-counter --severity CRITICAL #--exit-code 1
        # trivy image cuongopswat/go-coffeeshop-product --severity CRITICAL #--exit-code 1
        # trivy image cuongopswat/go-coffeeshop-proxy --severity CRITICAL #--exit-code 1
        # trivy image cuongopswat/go-coffeeshop-kitchen --severity CRITICAL #--exit-code 1
        trivy image cuongopswat/go-coffeeshop-web --severity CRITICAL --format json > trivy_report.json
        # trivy image cuongopswat/go-coffeeshop-barista --severity CRITICAL --format json >> trivy_report.json
        # trivy image cuongopswat/go-coffeeshop-counter --severity CRITICAL --format json >> trivy_report.json
        # trivy image cuongopswat/go-coffeeshop-product --severity CRITICAL --format json >> trivy_report.json
        # trivy image cuongopswat/go-coffeeshop-proxy --severity CRITICAL --format json >> trivy_report.json
        # trivy image cuongopswat/go-coffeeshop-kitchen --severity CRITICAL --format json >> trivy_report.json
        
    - name: Send email with Trivy report
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}  # Add this as a secret in GitHub
        password: ${{ secrets.SMTP_PASSWORD }}  # Add this as a secret in GitHub
        from: ${{ secrets.SMTP_USERNAME }}
        to: ${{ secrets.SMTP_USERNAME }}  # Change this to the recipient's email
        subject: Trivy Security Scan Report
        body: |
          The Trivy security scan has completed. Please find the attached report.
        attachments: trivy_report.json

    - uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          
    - name: Configure AWS CLI
      run: |
          # aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws configure set region us-east-1
          # aws configure list
          mkdir -p ~/.aws
          touch ~/.aws/credentials
          echo "${{ secrets.AWS_KEY }}" > ~/.aws/credentials
          aws sts get-caller-identity
          aws configure set region us-east-2
          
    - name: Login ECR private
      run: |
        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 492804330065.dkr.ecr.us-east-2.amazonaws.com
        #aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 271718395217.dkr.ecr.us-east-1.amazonaws.com
    - name: Tag and push image
      run: |

        docker tag cuongopswat/go-coffeeshop-web:latest 492804330065.dkr.ecr.us-east-2.amazonaws.com/go-coffeeshop-web:${{ inputs.image_version }}
        docker push 492804330065.dkr.ecr.us-east-2.amazonaws.com/go-coffeeshop-web:${{ inputs.image_version }}

        #docker tag cuongopswat/go-coffeeshop-web:latest 271718395217.dkr.ecr.us-east-1.amazonaws.com/go-coffeeshop-web:${{ inputs.image_version }}
        #docker push 271718395217.dkr.ecr.us-east-1.amazonaws.com/go-coffeeshop-web:${{ inputs.image_version }}
        
    - name: Update manifest
      run: |
        
        sed -i -E "s|(image: 492804330065.dkr.ecr.us-east-2.amazonaws.com/go-coffeeshop-web)(:.*)?|\1:${{ inputs.image_version }}|" docker-compose.yml
        cat docker-compose.yml | grep "image: 492804330065.dkr.ecr.us-east-2.amazonaws.com/go-coffeeshop-web" docker-compose.yml
        sed -i -E "s|(image: 492804330065.dkr.ecr.us-east-2.amazonaws.com/go-coffeeshop-web)(:.*)?|\1:${{ inputs.image_version }}|" ./manifest/web/web-deployment.yaml
        
    - name: Login GitHub
      run: |
        echo "${{ secrets.GIT_TOKEN }}" > ~/.netrc
        chmod 777 ~/.netrc
        git config --global user.email "chucthien2@gmail.com"
        git config --global user.name "tranchucthien"
    - name: Push code to branch 
      run: |   
         git config --global user.email "chucthien2@gmail.com"
         git config --global user.name "tranchucthien"
         git add docker-compose.yml
         git commit -m "Update image version for docker compose"
         git push 
    # - name: Create Pull Request
    #   uses: peter-evans/create-pull-request@v7
    - name: Create PR to branch test
      run: |
        sudo apt-get install gh -y
        gh auth login --with-token <<< "${{ secrets.GIT_TOKEN_KEY }}"
        VERSION="${{ inputs.image_version }}"
        gh pr create \
          --base test \
          --head "$BRANCH_NAME" \
          --title "Update image to version $VERSION" \
          --body "This PR updates the image version to \`$VERSION\` in docker-compose.yml"
